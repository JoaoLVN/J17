// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/07/2017 15:05:33"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          J17
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module J17_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg in;
// wires                                               
wire [31:0] PC;
wire [3:0] alucode;
wire flag;
wire flag1;
wire imControl;
wire [2:0] op1;
wire [20:0] op2;
wire [3:0] pcControl;
wire [31:0] result;
wire [6:0] seg;
wire writecode;

// assign statements (if any)                          
J17 i1 (
// port map - connection between master ports and signals/registers   
	.PC(PC),
	.alucode(alucode),
	.clk(clk),
	.flag(flag),
	.flag1(flag1),
	.imControl(imControl),
	.in(in),
	.op1(op1),
	.op2(op2),
	.pcControl(pcControl),
	.result(result),
	.seg(seg),
	.writecode(writecode)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #25000 1'b1;
	#25000;
end 

// in
initial
begin
	in = 1'b0;
end 
endmodule

